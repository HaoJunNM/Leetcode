Solution 1: use python built-in sort function, n*log(n)
class Solution(object):
    def sortedSquares(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        for i in range(len(nums)):
            nums[i] = nums[i]**2
        nums.sort()
        return nums

class Solution(object):
    def sortedSquares(self, A):
        return sorted(x*x for x in A)
        
Solution 2: Two pointer O(n)
class Solution(object):
    def sortedSquares(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        results = [0]*len(nums)
        left, right = 0, len(nums) - 1
        for i in range(len(nums) - 1, -1, -1):
            if abs(nums[left]) < abs(nums[right]):
                square = nums[right]
                right-=1
            else:
                square = nums[left]
                left+=1
            results[i] = square*square
        return results
