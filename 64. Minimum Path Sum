"""
Dynamic Programming
Suppose the minimum path sum of arriving at point (i, j) is S[i][j], 
then the state equation is S[i][j] = min(S[i - 1][j], S[i][j - 1]) + grid[i][j].
My solution is O(1) space
"""
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        m = len(grid)
        n = len(grid[0])
        if m == n == 1:
            return grid[0][0]
        for i in range(0,n):
            if i == 0:
                continue
            else:
                grid[0][i] = grid[0][i-1]+grid[0][i]
        for i in range(0,m):
            if i == 0:
                continue
            else:
                grid[i][0] = grid[i-1][0]+grid[i][0]
        if m == 1 or n == 1:
            return grid[m-1][n-1]
        for i in range(1,m):
            for j in range(1,n):
                if grid[i-1][j]<grid[i][j-1]:
                    grid[i][j] = grid[i][j]+grid[i-1][j]
                else:
                    grid[i][j] = grid[i][j]+grid[i][j-1]
        return grid[m-1][n-1]
        
